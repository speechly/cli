// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.4
// source: speechly/sal/v1/service.proto

package compilerv1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CompileResult_Result int32

const (
	CompileResult_COMPILE_SUCCESS CompileResult_Result = 0
	CompileResult_COMPILE_FAILURE CompileResult_Result = 1
	CompileResult_COMPILE_WARNING CompileResult_Result = 2
)

// Enum value maps for CompileResult_Result.
var (
	CompileResult_Result_name = map[int32]string{
		0: "COMPILE_SUCCESS",
		1: "COMPILE_FAILURE",
		2: "COMPILE_WARNING",
	}
	CompileResult_Result_value = map[string]int32{
		"COMPILE_SUCCESS": 0,
		"COMPILE_FAILURE": 1,
		"COMPILE_WARNING": 2,
	}
)

func (x CompileResult_Result) Enum() *CompileResult_Result {
	p := new(CompileResult_Result)
	*p = x
	return p
}

func (x CompileResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompileResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_service_proto_enumTypes[0].Descriptor()
}

func (CompileResult_Result) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_service_proto_enumTypes[0]
}

func (x CompileResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompileResult_Result.Descriptor instead.
func (CompileResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{1, 0}
}

type LineReference_Level int32

const (
	LineReference_LEVEL_NOTE    LineReference_Level = 0
	LineReference_LEVEL_WARNING LineReference_Level = 1
	LineReference_LEVEL_ERROR   LineReference_Level = 2
)

// Enum value maps for LineReference_Level.
var (
	LineReference_Level_name = map[int32]string{
		0: "LEVEL_NOTE",
		1: "LEVEL_WARNING",
		2: "LEVEL_ERROR",
	}
	LineReference_Level_value = map[string]int32{
		"LEVEL_NOTE":    0,
		"LEVEL_WARNING": 1,
		"LEVEL_ERROR":   2,
	}
)

func (x LineReference_Level) Enum() *LineReference_Level {
	p := new(LineReference_Level)
	*p = x
	return p
}

func (x LineReference_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineReference_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_speechly_sal_v1_service_proto_enumTypes[1].Descriptor()
}

func (LineReference_Level) Type() protoreflect.EnumType {
	return &file_speechly_sal_v1_service_proto_enumTypes[1]
}

func (x LineReference_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LineReference_Level.Descriptor instead.
func (LineReference_Level) EnumDescriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{3, 0}
}

type AppSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Language  string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	DataChunk []byte `protobuf:"bytes,3,opt,name=data_chunk,json=dataChunk,proto3" json:"data_chunk,omitempty"`
}

func (x *AppSource) Reset() {
	*x = AppSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSource) ProtoMessage() {}

func (x *AppSource) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSource.ProtoReflect.Descriptor instead.
func (*AppSource) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *AppSource) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppSource) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AppSource) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

type CompileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    CompileResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=speechly.sal.v1.CompileResult_Result" json:"result,omitempty"`
	Templates []string             `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	Messages  []*LineReference     `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *CompileResult) Reset() {
	*x = CompileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileResult) ProtoMessage() {}

func (x *CompileResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileResult.ProtoReflect.Descriptor instead.
func (*CompileResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *CompileResult) GetResult() CompileResult_Result {
	if x != nil {
		return x.Result
	}
	return CompileResult_COMPILE_SUCCESS
}

func (x *CompileResult) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *CompileResult) GetMessages() []*LineReference {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*LineReference `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ValidateResult) Reset() {
	*x = ValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResult) ProtoMessage() {}

func (x *ValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResult.ProtoReflect.Descriptor instead.
func (*ValidateResult) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateResult) GetMessages() []*LineReference {
	if x != nil {
		return x.Messages
	}
	return nil
}

type LineReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line    uint64              `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column  uint32              `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	File    string              `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Level   LineReference_Level `protobuf:"varint,4,opt,name=level,proto3,enum=speechly.sal.v1.LineReference_Level" json:"level,omitempty"`
	Message string              `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LineReference) Reset() {
	*x = LineReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechly_sal_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineReference) ProtoMessage() {}

func (x *LineReference) ProtoReflect() protoreflect.Message {
	mi := &file_speechly_sal_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineReference.ProtoReflect.Descriptor instead.
func (*LineReference) Descriptor() ([]byte, []int) {
	return file_speechly_sal_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *LineReference) GetLine() uint64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LineReference) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *LineReference) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *LineReference) GetLevel() LineReference_Level {
	if x != nil {
		return x.Level
	}
	return LineReference_LEVEL_NOTE
}

func (x *LineReference) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_speechly_sal_v1_service_proto protoreflect.FileDescriptor

var file_speechly_sal_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x73, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x22, 0x5d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0xf1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0x9e, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x12, 0x49, 0x0a, 0x08,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2e, 0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6c, 0x79, 0x2e,
	0x73, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x6c, 0x79, 0x2f, 0x73, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechly_sal_v1_service_proto_rawDescOnce sync.Once
	file_speechly_sal_v1_service_proto_rawDescData = file_speechly_sal_v1_service_proto_rawDesc
)

func file_speechly_sal_v1_service_proto_rawDescGZIP() []byte {
	file_speechly_sal_v1_service_proto_rawDescOnce.Do(func() {
		file_speechly_sal_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechly_sal_v1_service_proto_rawDescData)
	})
	return file_speechly_sal_v1_service_proto_rawDescData
}

var file_speechly_sal_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_speechly_sal_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_speechly_sal_v1_service_proto_goTypes = []interface{}{
	(CompileResult_Result)(0), // 0: speechly.sal.v1.CompileResult.Result
	(LineReference_Level)(0),  // 1: speechly.sal.v1.LineReference.Level
	(*AppSource)(nil),         // 2: speechly.sal.v1.AppSource
	(*CompileResult)(nil),     // 3: speechly.sal.v1.CompileResult
	(*ValidateResult)(nil),    // 4: speechly.sal.v1.ValidateResult
	(*LineReference)(nil),     // 5: speechly.sal.v1.LineReference
}
var file_speechly_sal_v1_service_proto_depIdxs = []int32{
	0, // 0: speechly.sal.v1.CompileResult.result:type_name -> speechly.sal.v1.CompileResult.Result
	5, // 1: speechly.sal.v1.CompileResult.messages:type_name -> speechly.sal.v1.LineReference
	5, // 2: speechly.sal.v1.ValidateResult.messages:type_name -> speechly.sal.v1.LineReference
	1, // 3: speechly.sal.v1.LineReference.level:type_name -> speechly.sal.v1.LineReference.Level
	2, // 4: speechly.sal.v1.Compiler.Compile:input_type -> speechly.sal.v1.AppSource
	2, // 5: speechly.sal.v1.Compiler.Validate:input_type -> speechly.sal.v1.AppSource
	3, // 6: speechly.sal.v1.Compiler.Compile:output_type -> speechly.sal.v1.CompileResult
	4, // 7: speechly.sal.v1.Compiler.Validate:output_type -> speechly.sal.v1.ValidateResult
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_speechly_sal_v1_service_proto_init() }
func file_speechly_sal_v1_service_proto_init() {
	if File_speechly_sal_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechly_sal_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechly_sal_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechly_sal_v1_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechly_sal_v1_service_proto_goTypes,
		DependencyIndexes: file_speechly_sal_v1_service_proto_depIdxs,
		EnumInfos:         file_speechly_sal_v1_service_proto_enumTypes,
		MessageInfos:      file_speechly_sal_v1_service_proto_msgTypes,
	}.Build()
	File_speechly_sal_v1_service_proto = out.File
	file_speechly_sal_v1_service_proto_rawDesc = nil
	file_speechly_sal_v1_service_proto_goTypes = nil
	file_speechly_sal_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompilerClient is the client API for Compiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompilerClient interface {
	Compile(ctx context.Context, opts ...grpc.CallOption) (Compiler_CompileClient, error)
	Validate(ctx context.Context, opts ...grpc.CallOption) (Compiler_ValidateClient, error)
}

type compilerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompilerClient(cc grpc.ClientConnInterface) CompilerClient {
	return &compilerClient{cc}
}

func (c *compilerClient) Compile(ctx context.Context, opts ...grpc.CallOption) (Compiler_CompileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Compiler_serviceDesc.Streams[0], "/speechly.sal.v1.Compiler/Compile", opts...)
	if err != nil {
		return nil, err
	}
	x := &compilerCompileClient{stream}
	return x, nil
}

type Compiler_CompileClient interface {
	Send(*AppSource) error
	CloseAndRecv() (*CompileResult, error)
	grpc.ClientStream
}

type compilerCompileClient struct {
	grpc.ClientStream
}

func (x *compilerCompileClient) Send(m *AppSource) error {
	return x.ClientStream.SendMsg(m)
}

func (x *compilerCompileClient) CloseAndRecv() (*CompileResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CompileResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *compilerClient) Validate(ctx context.Context, opts ...grpc.CallOption) (Compiler_ValidateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Compiler_serviceDesc.Streams[1], "/speechly.sal.v1.Compiler/Validate", opts...)
	if err != nil {
		return nil, err
	}
	x := &compilerValidateClient{stream}
	return x, nil
}

type Compiler_ValidateClient interface {
	Send(*AppSource) error
	CloseAndRecv() (*ValidateResult, error)
	grpc.ClientStream
}

type compilerValidateClient struct {
	grpc.ClientStream
}

func (x *compilerValidateClient) Send(m *AppSource) error {
	return x.ClientStream.SendMsg(m)
}

func (x *compilerValidateClient) CloseAndRecv() (*ValidateResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ValidateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompilerServer is the server API for Compiler service.
type CompilerServer interface {
	Compile(Compiler_CompileServer) error
	Validate(Compiler_ValidateServer) error
}

// UnimplementedCompilerServer can be embedded to have forward compatible implementations.
type UnimplementedCompilerServer struct {
}

func (*UnimplementedCompilerServer) Compile(Compiler_CompileServer) error {
	return status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (*UnimplementedCompilerServer) Validate(Compiler_ValidateServer) error {
	return status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

func RegisterCompilerServer(s *grpc.Server, srv CompilerServer) {
	s.RegisterService(&_Compiler_serviceDesc, srv)
}

func _Compiler_Compile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompilerServer).Compile(&compilerCompileServer{stream})
}

type Compiler_CompileServer interface {
	SendAndClose(*CompileResult) error
	Recv() (*AppSource, error)
	grpc.ServerStream
}

type compilerCompileServer struct {
	grpc.ServerStream
}

func (x *compilerCompileServer) SendAndClose(m *CompileResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *compilerCompileServer) Recv() (*AppSource, error) {
	m := new(AppSource)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Compiler_Validate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompilerServer).Validate(&compilerValidateServer{stream})
}

type Compiler_ValidateServer interface {
	SendAndClose(*ValidateResult) error
	Recv() (*AppSource, error)
	grpc.ServerStream
}

type compilerValidateServer struct {
	grpc.ServerStream
}

func (x *compilerValidateServer) SendAndClose(m *ValidateResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *compilerValidateServer) Recv() (*AppSource, error) {
	m := new(AppSource)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Compiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "speechly.sal.v1.Compiler",
	HandlerType: (*CompilerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compile",
			Handler:       _Compiler_Compile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Validate",
			Handler:       _Compiler_Validate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "speechly/sal/v1/service.proto",
}
